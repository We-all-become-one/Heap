Требования:
1. Класс Solution должен содержать класс LineItem.
2. Класс Solution должен содержать enum Type.
3. Класс Solution должен содержать публичное статическое поле lines типа List<LineItem>, которое сразу проинициализировано.
4. В методе main(String[] args) программа должна считывать имена файлов с консоли (используй BufferedReader).
5. В методе main(String[] args) BufferedReader для считывания данных с консоли должен быть закрыт.
6. Программа должна считывать содержимое первого и второго файла (используй FileReader).
7. Потоки чтения из файлов (FileReader) должны быть закрыты.
8. Список lines должен содержать объединенную версию строк из файлов, где для каждой строки указана одна из операций ADDED, REMOVED, SAME.

public class Solution {
    public static List<LineItem> lines = new ArrayList<>();

    public static void main(String[] args) throws IOException {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
             BufferedReader firstReader = new BufferedReader(new FileReader(reader.readLine()));
             BufferedReader secondReader = new BufferedReader(new FileReader(reader.readLine()))) {

            String firstString = firstReader.readLine();
            String stringOfSecond = secondReader.readLine();
            String secondString = null;
            boolean canReadNext = true;

            while (true) {
                if (firstString.equals(stringOfSecond)) {
                    lines.add(new LineItem(Type.SAME, firstString));
                    if (canReadNext) firstString = firstReader.readLine();
                    else {
                        firstString = secondString;
                        canReadNext = true;
                    }
                    stringOfSecond = secondReader.readLine();
                    if (firstString == null && stringOfSecond == null) break;
                    if (firstString == null) {
                        lines.add(new LineItem(Type.ADDED, stringOfSecond));
                        break;
                    }
                    if (stringOfSecond == null) {
                        lines.add(new LineItem(Type.REMOVED, firstString));
                        break;
                    }
                } else {
                    secondString = firstReader.readLine();
                    if (secondString.equals(stringOfSecond)) {
                        lines.add(new LineItem(Type.REMOVED, firstString));
                        firstString = secondString;
                    } else {
                        lines.add(new LineItem(Type.ADDED, stringOfSecond));
                        stringOfSecond = secondReader.readLine();
                        canReadNext = false;
                    }
                }
            }
        }
    }

    public enum Type {
        ADDED,        //добавлена новая строка
        REMOVED,      //удалена строка
        SAME          //без изменений
    }

    public static class LineItem {
        public Type type;
        public String line;

        public LineItem(Type type, String line) {
            this.type = type;
            this.line = line;
        }
    }
}
